{"version":3,"sources":["components/ErrorWidget/ErrorWidget.js","store/data.selectors.ts","components/WeatherWidget/WeatherWidget.js","store/data.actions.ts","components/Search/Search.js","App.js","store/index.js","services/http.service.ts","services/data.service.ts","store/data.reducer.ts","store/root.reducer.js","index.js"],"names":["useStyles","makeStyles","root","color","padding","ErrorWidget","classes","Paper","className","elevation","hasError","state","weather","success","_","isEmpty","error","hasData","getGeoData","has","pick","city","getShortForecast","list","description","WeatherWidget","useSelector","name","country","icon","alt","src","appConfig","iconURL","loadSuccess","data","type","payload","loadFailure","width","transition","textField","Search","dispatch","useDispatch","useState","value","setValue","noValidate","autoComplete","onSubmit","e","preventDefault","trim","getState","a","api","get","result","response","TextField","autoFocus","variant","InputProps","startAdornment","InputAdornment","position","endAdornment","IconButton","onClick","label","onChange","currentTarget","App","deps","loaded","failed","Typography","HttpClient","appid","baseURL","instance","this","axios","create","responseType","headers","params","DataService","http","q","units","initialState","reducer","combineReducers","process","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85d647e2.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"background-color\": \"rgb(255, 255, 255, 0.2)\",\n    color: \"white\",\n    padding: \"40px\"\n  }\n})\n\nexport function ErrorWidget() {\n  const classes = useStyles()\n\n  return (\n    <Paper className={classes.root} elevation={0}>\n        Sorry, the specified city was not found.\n    </Paper>\n  );\n}\n","import _ from \"lodash\";\nimport {IState} from \"./store.types\";\nimport {ShortForecast} from \"../services/data.types\";\n\nexport const hasError = (state: IState): boolean => !state.weather.success && !_.isEmpty(state.weather.error);\nexport const hasData = (state: IState): boolean => state.weather.success;\n\nexport const getGeoData = (state: IState): { name: string, country: string } | null =>\n    _.has(state, \"weather.city.name\") ? _.pick(state.weather.city, [\"name\", \"country\"]) : null;\nexport const getShortForecast = (state: IState): ShortForecast | null =>\n    _.has(state, \"weather.list[0].weather[0]\") ? state.weather.list[0].weather[0] : null;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getGeoData, getShortForecast } from \"../../store/data.selectors\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport appConfig from \"../../appConfig.json\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"background-color\": \"rgb(255, 255, 255, 0.2)\",\n    color: \"white\",\n    padding: \"40px\"\n  },\n  description: {\n    \"text-transform\": \"capitalize\"\n  }\n})\n\nexport function WeatherWidget() {\n  const classes = useStyles();\n  const { name, country } = useSelector(getGeoData);\n  const { description, icon } = useSelector(getShortForecast);\n\n  return (\n    <Paper className={classes.root} elevation={0}>\n      <p>{`${name}, ${country}`}</p>\n      <img alt=\"weather icon\" src={`${appConfig.iconURL}${icon}@2x.png`} />\n      <p className={classes.description}>{description}</p>\n    </Paper>\n  );\n}\n","import {Action, ActionCreator, Dispatch} from 'redux';\nimport {DataService} from \"../services/data.service\";\n\nexport const LOAD_SUCCESS = \"LOAD_SUCCESS\";\nexport const LOAD_FAILURE = \"LOAD_FAILURE\";\nexport const CLEAR_DATA = \"CLEAR_DATA\";\n\nexport const load = (city: String) => async (dispatch: Dispatch, getState: Function, {api} : {api: DataService}) => {\n    try {\n        const result = await api.get(city);\n        dispatch(loadSuccess(result.data));\n    } catch (e) {\n        dispatch(loadFailure(e.response))\n    }\n}\n\nexport const loadSuccess: ActionCreator<Action> = (data: any) => ({\n    type: LOAD_SUCCESS,\n    payload: data\n});\n\nexport const loadFailure: ActionCreator<Action> = (error: any) => ({\n    type: LOAD_FAILURE,\n    payload: error\n});\n\nexport const clear: ActionCreator<Action> = () => ({\n   type: CLEAR_DATA\n});\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { clear, load } from \"../../store/data.actions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"margin\": '50px',\n    \"max-width\": \"500px\",\n    width: '100%',\n    transition: \"all 0.2s ease 0s\"\n  },\n  textField: {\n    width: '100%'\n  }\n})\n\nexport function Search() {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const classes = useStyles();\n\n  const submit = (e) => {\n    e.preventDefault();\n    value.trim() && dispatch(load(value.trim()));\n    !value.trim() && dispatch(clear());\n  }\n\n  const clearInput = () => {\n    setValue(\"\");\n    dispatch(clear());\n  }\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={submit}>\n      <TextField\n        autoFocus\n        className={classes.textField}\n        variant={\"outlined\"}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={clearInput}>\n                <ClearIcon />\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n        label={\"City Name\"}\n        value={value}\n        onChange={({ currentTarget: { value } }) => setValue(value)} />\n    </form>\n  );\n}\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Search, ErrorWidget, WeatherWidget } from \"./components\";\nimport { hasData, hasError } from \"./store/data.selectors\";\nimport { Typography } from \"@material-ui/core\";\nimport './App.scss';\n\nfunction App() {\n  const loaded = useSelector(hasData);\n  const failed = useSelector(hasError);\n\n  return (\n    <div className=\"App\">\n      <Typography variant={\"h2\"}>Weather App</Typography>\n      <Search />\n      {loaded ? <WeatherWidget /> : failed ? <ErrorWidget /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { reducer as rootReducer } from \"./root.reducer\";\n\nexport const makeStore = (deps, state) =>\n  createStore(\n    rootReducer,\n    state,\n    composeWithDevTools(applyMiddleware(\n      thunk.withExtraArgument(deps)\n    ))\n  );\n","import axios, {AxiosInstance} from 'axios';\n\nexport class HttpClient {\n    private readonly appid: string;\n    private readonly instance: AxiosInstance;\n\n    public constructor(appid: string, baseURL?: string) {\n        this.appid = appid;\n        this.instance = axios.create({\n            baseURL,\n            responseType: 'json',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    public get(params: object) {\n        return this.instance.get(\"\", {\n            params: {\n                ...params,\n                appid: this.appid //workaround because of broken default params in axios\n            }\n        });\n    }\n};\n","import {HttpClient} from \"./http.service\";\nimport {WeatherDataType} from \"./data.types\";\nimport {AxiosResponse} from \"axios\";\n\nexport class DataService {\n    constructor(private http: HttpClient) {\n    }\n\n    public get(city: String): Promise<AxiosResponse<{ data: WeatherDataType }>> {\n        return this.http.get({q: city, units: \"metric\"});\n    }\n}\n","import {CLEAR_DATA, LOAD_FAILURE, LOAD_SUCCESS} from \"./data.actions\";\nimport {AnyAction} from \"redux\";\n\nconst initialState = {\n    error: null\n};\n\nexport const reducer = (state = initialState, {type, payload}: AnyAction) => {\n    switch (type) {\n        case LOAD_SUCCESS:\n            return {\n                ...payload,\n                error: null,\n                success: true\n            }\n        case LOAD_FAILURE:\n            return {\n                error: payload,\n                success: false\n            }\n        case CLEAR_DATA:\n            return {\n                error: null\n            }\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport { reducer as dataReducer } from \"./data.reducer\";\n\nexport const reducer = combineReducers({\n  weather: dataReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\n\nimport { HttpClient } from \"./services/http.service\";\nimport { DataService } from \"./services/data.service\";\nimport { makeStore } from \"./store\";\n\nimport appConfig from \"./appConfig\";\nimport './index.css';\n\nconst http = new HttpClient(process.env.REACT_APP_USER_ID, appConfig.baseURL);\nconst store = makeStore({ api: new DataService(http)}, {weather: {}});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}